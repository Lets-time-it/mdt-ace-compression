import assert from 'assert';
import { DecodeForPrint, EncodeForPrint } from '../../src/deflate/index';

describe('DecodeForPrint', () => {
  it('Properly encodes', () => {
    const input = Array.from({ length: 255 }, (_, i) => i);
    const encoded = EncodeForPrint(input);
    const decoded = DecodeForPrint(encoded);
    assert.deepEqual(input, decoded);
  });
  it('Matches a pre-existing encoded string', () => {
    const encoded = '9r12UXjmq0VOizp((JTjnQjpqJk5zRUSysPLav7AYLx63ENXg2fVrQsgyUE8XZmyp3)OV(52(VmURzi06B817NgMo8WUHqmgUBSBIIy3CC6AYE)4t(pFrmTV5R4(OVogEdFFtOB38q8V)a81T9DD97rT3Xqy(6xdHF7RqhZ9TO3x)093)1RT39D0Yl7gMd0EDmme2h7Ngrfe3m07NpCimgRNrw(syGSwFOVl(TUUJH4rkuifVMdY0H6D)TxPDsHLzucnO4Gs77Usk91V5VvRzmMKSA1mhJL9exaqUcGulnkUuX0mPca5gaKoUs50GrjToNTeaXjgWnkLHznAayGoTpQeagRLBKGfuGY646TaGiCcaLXbGfrqHb74NzGsIUmwTdzHdjd5rGae3uVUzE8PW0yUfzOou4zQf2CkIhMhYvZ)GchZL8ZVWIkTePvIDqHdtYbN8rlLVY6R0jHSRSQdJrMMaQ4u88SjyJjyjeQBxjk2e(YUtl6awjpnzKJisB4h5RoLbpXg5cTI03ZZvil3Oy3Q42QG08X1Zzzjzb)eYCEroqHMOqtwOPk0mxC6jBfuJ7()1hGDrbkZwYdV4CKZmvaHc2cx2biBRCw8HCj(tTT1SCNZsuC2eBR35Br8144DdqBurjxSsvtcm9hk5WAh2So45sluinvXxEizy5HM0WyttA6fzZISyronMlkNZDBkXPUnT16m4gArPSwF0(Z)AytP4wMbPOkg)eB7Rl)6o18l8(VJPskD1mku3eEAUFG(ZfJSU7qi8ZPH2cL7N6htxGtG4)h';
    const decoded = [
      125, 84, 219, 110, 156, 48, 16, 253, 162, 72, 246, 248,
      254, 216, 38, 141, 154, 60, 208, 168, 228, 217, 234, 178,
      152, 148, 150, 64, 181, 107, 114, 121, 233, 183, 119, 198,
      134, 93, 188, 145, 42, 25, 152, 235, 241, 241, 204, 96,
      207, 253, 163, 175, 159, 219, 254, 203, 184, 107, 134,
      208, 250, 198, 215, 251, 105, 152, 14, 15, 187, 33, 196,
      24, 238, 198, 110, 162, 136, 221, 28, 167, 107, 178, 247,
      227, 147, 255, 124, 17, 211, 190, 249, 138, 251, 232, 235, 24,
      222, 240, 125, 19, 186, 221, 60, 196, 191, 63, 192, 215, 109,
      223, 117, 253, 30, 181, 119, 12, 97, 190, 126, 13, 225, 183,
      175, 208, 49, 247, 45, 122, 95, 63, 221, 223, 127, 189, 182,
      119, 223, 209, 242, 178, 27, 230, 64, 123, 29, 195, 16, 246,
      177, 159, 70, 84, 16, 55, 67, 239, 231, 195, 33, 140, 177, 158,
      145, 229, 75, 24, 200, 90, 31, 250, 46, 126, 235, 186, 99, 136,
      71, 10, 133, 20, 175, 57, 200, 116, 168, 119, 127, 123, 165, 157,
      20, 150, 25, 37, 52, 40, 14, 74, 251, 238, 74, 74, 95, 191, 249,
      91, 173, 25, 99, 146, 172, 86, 51, 199, 88, 246, 196, 5, 64, 174,
      0, 82, 75, 163, 184, 84, 76, 51, 169, 0, 228, 6, 64, 58, 174, 148,
      211, 96, 148, 180, 206, 217, 18, 64, 156, 24, 112, 163, 148, 97,
      214, 104, 0, 6, 58, 237, 163, 18, 128, 177, 150, 27, 9, 22, 20,
      40, 235, 184, 222, 2, 32, 194, 9, 64, 25, 7, 96, 17, 65, 97, 176,
      227, 103, 6, 74, 162, 203, 88, 237, 144, 133, 67, 50, 228, 17,
      8, 16, 55, 245, 186, 153, 199, 167, 48, 141, 185, 69, 134, 58,
      20, 158, 169, 133, 205, 41, 226, 97, 30, 114, 53, 255, 160,
      112, 204, 37, 63, 191, 176, 168, 180, 68, 90, 137, 29, 20,
      14, 147, 28, 156, 124, 180, 148, 175, 172, 175, 116, 18,
      178, 43, 171, 14, 99, 100, 154, 128, 138, 83, 60, 207, 38,
      216, 152, 96, 9, 161, 110, 87, 162, 216, 132, 47, 187,
      211, 162, 3, 86, 242, 52, 25, 57, 34, 210, 134, 31, 249, 234,
      148, 193, 19, 27, 185, 208, 138, 244, 61, 207, 21, 178, 220,
      40, 118, 171, 184, 173, 130, 52, 31, 215, 115, 150, 37, 89,
      240, 19, 50, 231, 69, 14, 20, 154, 40, 52, 89, 104, 170, 208,
      204, 197, 233, 201, 86, 80, 227, 238, 255, 245, 1, 118, 81, 160,
      204, 150, 60, 188, 56, 71, 206, 76, 5, 132, 130, 45, 92, 118, 128,
      108, 43, 103, 241, 33, 151, 248, 83, 219, 214, 44, 119, 206, 18,
      197, 217, 196, 182, 222, 249, 22, 241, 53, 142, 119, 3, 180, 81,
      81, 114, 177, 82, 53, 9, 76, 127, 40, 57, 172, 29, 54, 235, 224,
      185, 180, 80, 72, 83, 197, 151, 135, 100, 88, 30, 154, 52, 140,
      77, 147, 166, 23, 217, 44, 178, 88, 228, 52, 230, 162, 156, 115,
      183, 41, 113, 234, 54, 109, 173, 51, 184, 161, 69, 41, 107, 125,
      180, 63, 255, 26, 54, 165, 184, 101, 6, 41, 170, 24, 63, 177, 237,
      235, 242, 235, 78, 205, 47, 188, 255, 142, 169, 164, 116, 53, 163,
      80, 55, 225, 105, 238, 7, 250, 115, 49, 178, 238, 14, 33, 252, 156,
      134, 182, 80, 238, 167, 126, 76, 23, 56, 129, 248, 127,
    ];
    const actuallyDecoded = DecodeForPrint(encoded);
    assert.deepEqual(actuallyDecoded, decoded);
  });
});
